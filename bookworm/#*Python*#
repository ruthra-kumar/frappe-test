Python 3.9.1 (default, Jan 20 2021, 00:00:00) 
[GCC 10.2.1 20201125 (Red Hat 10.2.1-9)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> python.el: native completion setup loaded
>>> exec(open("/home/ruthra/frappe/lib_erp2/db_orm.py").read())
>>> allbooks = session.query(Book).all()
>>> allbooks
[<Book(bookid='100', title='Can't hurt me', authors='Harry', isbn13='None')>, <Book(bookid='101', title='The Element', authors='Myself', isbn13='None')>, <Book(bookid='102', title='The Element 2', authors='Myself', isbn13='None')>, <Book(bookid='103', title='The Element 2', authors='Myself', isbn13='289342371')>, <Book(bookid='104', title='The Element 2', authors='Myself', isbn13='289342371')>, <Book(bookid='401', title='Foundation part 2', authors='Ruthra', isbn13='02394')>]
>>> bks = session.query(Book.bookid.in_([100, 101]))
>>> bks
<sqlalchemy.orm.query.Query object at 0x7fbca89b5d60>
>>> for x in bks:
...     x
... 
(True,)
(True,)
(False,)
(False,)
(False,)
(False,)
>>> for x in bks:
...     type(x)
... 
<class 'sqlalchemy.engine.row.Row'>
<class 'sqlalchemy.engine.row.Row'>
<class 'sqlalchemy.engine.row.Row'>
<class 'sqlalchemy.engine.row.Row'>
<class 'sqlalchemy.engine.row.Row'>
<class 'sqlalchemy.engine.row.Row'>
>>> bks = session.query(Book.bookid.in_([100, 101])).fetchall()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Query' object has no attribute 'fetchall'
>>> bks = session.query(Book.bookid.in_([100, 101]))
>>> bks
<sqlalchemy.orm.query.Query object at 0x7fbca88f3eb0>
>>> bks.all
<bound method Query.all of <sqlalchemy.orm.query.Query object at 0x7fbca88f3eb0>>
>>> bks.values
<bound method Query.values of <sqlalchemy.orm.query.Query object at 0x7fbca88f3eb0>>
>>> bks.values()
<stdin>:1: SADeprecationWarning: Query.values() is deprecated and will be removed in a future release.  Please use Query.with_entities() (deprecated since: 1.4)
<tuple_iterator object at 0x7fbca89b5d60>
>>> bks.one()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/ruthra/.local/lib/python3.9/site-packages/sqlalchemy/orm/query.py", line 2780, in one
    return self._iter().one()
  File "/home/ruthra/.local/lib/python3.9/site-packages/sqlalchemy/engine/result.py", line 1162, in one
    return self._only_one_row(True, True, False)
  File "/home/ruthra/.local/lib/python3.9/site-packages/sqlalchemy/engine/result.py", line 620, in _only_one_row
    raise exc.MultipleResultsFound(
sqlalchemy.exc.MultipleResultsFound: Multiple rows were found when exactly one was required
>>> bks.all()
[(True,), (True,), (False,), (False,), (False,), (False,)]
>>> bks = session.query(Book.bookid).filter(Book.bookid.in_([100, 101]))
>>> bks
<sqlalchemy.orm.query.Query object at 0x7fbca71edd90>
>>> bks.all()
[(100,), (101,)]
>>> bks.all()
[(100,), (101,)]
>>> for x in bks:
...     print(x)
... 
(100,)
(101,)
>>> bks = session.query(Book).filter(Book.bookid.in_([100, 101]))
>>> for x in bks:
...     print(x)
... 
<Book(bookid='100', title='Can't hurt me', authors='Harry', isbn13='None')>
<Book(bookid='101', title='The Element', authors='Myself', isbn13='None')>
>>> int('')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: ''
>>> ''
''
>>> type('')
<class 'str'>
>>> None
>>> None == ''
False
>>> if '':
...   C-c C-c
KeyboardInterrupt
>>> str = 'Hello'
>>> if str:
...     print("Non empty")
... else:
...     print("empty")
... 
Non empty
>>> str = ''
>>> if str:
...     print("Non empty")
... else:
...     print("empty")
... 
empty
>>> 